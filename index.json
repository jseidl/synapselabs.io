[{"categories":["Home Automation"],"contents":"Shortly after I released my latest post, a friend DM\u0026rsquo;ed me on Twitter and asked about my residents card that I showcased briefly, so it gave the perfect opportunity on making a post about it and share with the world this card that I enjoy so much. It\u0026rsquo;s pretty easy and it\u0026rsquo;s mostly vanilla Home Assistant/Lovelace so put your mad scientist lab coats, hop aboard and let\u0026rsquo;s learn how to make awesome display cards.\nThe idea of developing a residents card came from seeing many other Home Assistant\u0026rsquo;s user\u0026rsquo;s designs around the web, many included their device_tracker status, name and picture and I wanted to give a little more spice to it.\nUploading your resident\u0026rsquo;s images and creating the person entities If you don\u0026rsquo;t have your person entries yet, let\u0026rsquo;s start with the basic. I usually have a person folder under packages. If you\u0026rsquo;re not using packages and still have all your configuration under configuration.yaml with over 600 lines like a savage literally from before fire was discovered, stop what you\u0026rsquo;re doing right now and go convert into the packages model.\nOr\u0026hellip; well\u0026hellip;. you can wait until I write about it too. Shame is already there patting you in the back anyway.\nI create one file per resident where I define the customize entry (resident picture), the person entity with only one device_tracker entry, because I use the Better Presence add-on (we\u0026rsquo;ll see more about presence detection and this add-on in a future post).\n# jseidl.yaml\r homeassistant:\rcustomize:\rperson.jan:\rentity_picture: \u0026#34;/local/images/residents/jseidl.jpg\u0026#34;\rperson:\r- name: Jan\rid: jseidl\ruser_id: !secret person_jseidl_userid\rdevice_trackers:\r- device_tracker.jseidl_presence\rCreating proximity sensors Upon randomly reading Home Assistant\u0026rsquo;s components documentation, I\u0026rsquo;ve stumbled uponn the proximity sensor and decided it would be a cool addition to my residents information. For that to work, you\u0026rsquo;ll need device_tracker entries with GPS info, so I add our phones (OwnTracks) device_tracker entity exclusively since my aggregate one not always have GPS info on it.\nproximity:\rhome_jseidl:\rdevices:\r- device_tracker.jseidl_phone\rtolerance: 50\runit_of_measurement: mi\rhome_wife:\rdevices:\r- device_tracker.wife_phone\rtolerance: 50\runit_of_measurement: mi\rhome_residents:\rdevices:\r- device_tracker.wife_phone\r- device_tracker.jseidl_phone\rtolerance: 50\runit_of_measurement: mi\rThis sensor not only gives you the distance between the resident and home but also if the resident is moving towards or away from home. You can calculate the distance to zones other than home by changing the zone attribute of the sensor (defaults to home).\nThis is specially useful to check if you can play one more round of your favorite video-game before your partner arrives and give you heat for being playing video-games all day for many different reasons.\nCreating battery_level sensors if your battery_level is a sensor\u0026rsquo;s attribute Many sensors will have a battery_level attribute but that won\u0026rsquo;t work with Picture Elements card that we\u0026rsquo;ll be using to build up our residents card. Its state-icon entry needs an entity icon. You will need a sensor entity exclusively for this value with an battery icon.\nIf you don\u0026rsquo;t have one yet you can hop back into my latest post to find out how to make cool dynamic icon for your cell phone battery level.\nCreating the card definition Each resident block consists of a picture, the zone indicator (Home/Away/Work) and the distance to home in the bottom and the phone battery percentage and icon on the top left corner.\nI use a small CSS trick to make the Zone Indicator element span across all bottom part forming a bar with a black background with 0.4 opacity for the looks. Positioning is done using percentages and em so all is relative and somewhat responsive.\ncards:\r- type: picture-elements\rimage: !file /local/images/residents/jseidl.jpg\relements:\r# Home / Away - Zone indicator\r - type: state-label\rentity: device_tracker.jseidl_presence\rstyle:\rleft: 0\rbottom: 0\rpointer-events: none\rline-height: 1.1em\rfont-size: 1.1em\rbackground-color: rgba(0, 0, 0, 0.4)\rwidth: 100%\rtransform: initial\rpadding: 0 2px\r# Proximity to Home\r - type: state-label\rentity: proximity.home_jseidl\rstyle:\rright: 0\rbottom: 0\rpointer-events: none\rtransform: initial\rline-height: 1.1em\rfont-size: 1.1em\rpadding: 0 2px\r\u0026#34;--paper-item-icon-color\u0026#34;: white\r# Phone Battery (Text)\r - type: state-label\rentity: sensor.jseidl_phone_batt\rtitle: sensor.jseidl_phone_batt\rstyle:\rleft: 0\rtop: 0\rpadding: 0 8px\rpointer-events: none\rtransform: initial\rline-height: 2em\rfont-size: 1.1em\r# Phone Battery (Icon)\r - type: state-icon\rentity: sensor.jseidl_phone_batt\rstyle:\rright: 0\rtop: 2%\rpointer-events: none\rtransform: initial\rline-height: 2em\rfont-size: 1.1em\r\u0026#34;--paper-item-icon-color\u0026#34;: white\rAnd that\u0026rsquo;s all it takes to have a nice residents display on your Lovelace UI. Picture Elements is very powerful and I use in quite different cards that I will be showcasing in a near future. Let me know in the comments what other information do you think it would be useful to have in this card. Stay safe and keep getting creative with your homes!\n","permalink":"https://synapselabs.io/posts/lovelace-residents-card-for-home-assistant/","tags":["Home Assistant","Lovelace"],"title":"Create a custom 'Residents' card in your Home Assistant's dashboard"},{"categories":["Home Automation"],"contents":"There are several components in Home Assistant that report their battery level. Today we\u0026rsquo;re gonna learn how to do some cool tricks in order to get most of this information such as :\n Notifying Low battery sensors Grouping multiple battery sensors for the same device Getting your phone\u0026rsquo;s charging state by monitoring the battery level Reminder for charging your phone Tweaking the battery icon with charging states  Low battery sensors I have a bunch of wireless Zigbee and Z-Wave sensors integrated with Home Assistant. Even thou they\u0026rsquo;re very efficient by using deep sleep, I still have to change their battery from time to time and I\u0026rsquo;d rather be notified that I need to do so than one day realize something is not working because that sensor\u0026rsquo;s battery is dead.\nI\u0026rsquo;m pretty familiar with Jinja2 (Home Assistant\u0026rsquo;s Templating language) from years of developing Flask apps so I decided to give a try on creating this sensor with Home Assistant\u0026rsquo;s Template sensor with filters to beautifully achieve its goal.\nI ended up using a Template sensor to get the lowest battery level across all sensors, then a Template binary_sensor with a problem device_class to indicate wether a sensor has low battery (if the lowest battery level is below a certain threshold) and a alert to keep notifying me in a given interval until I charge or replace the battery. I also used a list to keep the sensors I want to ignore like our phone\u0026rsquo;s battery.\nsensor:\r- platform: template\rsensors:\rsensors_lowest_battery_level:\rfriendly_name: \u0026#39;Lowest battery level (Sensors)\u0026#39;\rentity_id: sun.sun\rdevice_class: battery\runit_of_measurement: \u0026#39;%\u0026#39;\rvalue_template: \u0026gt;\r{% set domains = [\u0026#39;sensor\u0026#39;, \u0026#39;zwave\u0026#39;] %}\r {% set ns = namespace(min_batt=100, entities=[]) %}\r{%- set exclude_sensors = [\u0026#39;sensor.sensors_lowest_battery_level\u0026#39;,\u0026#39;sensor.wife_phone_batt\u0026#39;,\u0026#39;sensor.jseidl_phone_batt\u0026#39;] -%}\r{% for domain in domains %}\r{% set ns.entities = states[domain] %}\r{% for sensor in exclude_sensors %}\r{% set ns.entities = ns.entities | rejectattr(\u0026#39;entity_id\u0026#39;, \u0026#39;equalto\u0026#39;, sensor) %}\r{% endfor %}\r{% set batt_sensors = ns.entities | selectattr(\u0026#39;attributes.device_class\u0026#39;,\u0026#39;equalto\u0026#39;,\u0026#39;battery\u0026#39;) | map(attribute=\u0026#39;state\u0026#39;) | reject(\u0026#39;equalto\u0026#39;, \u0026#39;unknown\u0026#39;) | reject(\u0026#39;equalto\u0026#39;, \u0026#39;None\u0026#39;) | map(\u0026#39;int\u0026#39;) | reject(\u0026#39;equalto\u0026#39;, 0) | list %}\r{% set batt_attrs = ns.entities | selectattr(\u0026#39;attributes.battery_level\u0026#39;,\u0026#39;defined\u0026#39;) | map(attribute=\u0026#39;attributes.battery_level\u0026#39;) | reject(\u0026#39;equalto\u0026#39;, \u0026#39;unknown\u0026#39;) | reject(\u0026#39;equalto\u0026#39;, \u0026#39;None\u0026#39;) | map(\u0026#39;int\u0026#39;) | reject(\u0026#39;equalto\u0026#39;, 0) | list %}\r{% set batt_lvls = batt_sensors + batt_attrs %}\r{% if batt_lvls|length \u0026gt; 0 %}\r{% set _min = batt_lvls|min %}\r{% if _min \u0026lt; ns.min_batt %}\r{% set ns.min_batt = _min %}\r{% endif %}\r{% endif %}\r{% endfor %}\r{{ ns.min_batt }}\rbinary_sensor:\r- platform: template\rsensors:\rsensor_low_battery:\rvalue_template: \u0026#34;{{ states(\u0026#39;sensor.sensors_lowest_battery_level\u0026#39;)|int \u0026lt;= 40 }}\u0026#34;\rfriendly_name: \u0026#39;A sensor has low battery\u0026#39;\rdevice_class: problem\ralert:\rsensor_low_battery:\rname: Sensor has low battery!\rmessage: \u0026gt;\r{%- set domains = [\u0026#39;sensor\u0026#39;, \u0026#39;zwave\u0026#39;] -%}\r {%- set threshold = 40 -%}\r{%- set exclude_entities = [\u0026#39;sensor.sensors_lowest_battery_level\u0026#39;,\u0026#39;sensor.wife_phone_batt\u0026#39;,\u0026#39;sensor.jseidl_phone_batt\u0026#39;] -%}\rSensors are below 40% battery:\r{%- for domain in domains -%}\r{%- for item in states[domain] -%}\r{%- if item.entity_id not in exclude_entities -%}\r{%- if item.attributes.battery_level is defined -%}\r{%- set level = item.attributes.battery_level|int -%}\r{% if level \u0026gt; 0 and level \u0026lt; threshold %}\r- {{ item.attributes.friendly_name }} ({{ item.attributes[\u0026#39;battery_level\u0026#39;]|int}}%)\r{%- endif -%}\r{%- endif -%}\r{%- if item.attributes.device_class is defined and item.attributes.device_class == \u0026#39;battery\u0026#39; -%}\r{%- set level = item.state|int -%}\r{% if level \u0026gt; 0 and level \u0026lt;= threshold %}\r- {{ item.attributes.friendly_name }} ({{ item.state|int }}%)\r{%- endif -%}\r{%- endif %}\r{%- endif -%}\r{%- endfor -%}\r{%- endfor -%}\rentity_id: binary_sensor.sensor_low_battery\rstate: \u0026#39;on\u0026#39;\rrepeat: - 5\r- 60\r- 360\rskip_first: true\rcan_acknowledge: true\rnotifiers:\r- jseidl_telegram\rGrouping multiple battery sensors for the same device At our home we use both OwnTracks and the Home Assistant app for Android that report battery_level. This is one easy trick that I also use for my multisensors to get a room average of temperature, luminosity, humidity etc by averaging all sensors in that room. For that we\u0026rsquo;ll use the Min/Max sensor and Template sensor.\nsensor:\r- platform: template\rsensors:\rjseidl_phone_batt_owntracks:\rfriendly_name: \u0026#34;Battery Level (Jan\u0026#39;s Phone - Owntracks)\u0026#34;\runit_of_measurement: \u0026#39;%\u0026#39;\rdevice_class: battery\rvalue_template: \u0026#34;{{ state_attr(\u0026#39;device_tracker.jseidl_phone\u0026#39;, \u0026#39;battery_level\u0026#39;) }}\u0026#34;\rjseidl_phone_batt_ha_app:\rfriendly_name: \u0026#34;Battery Level (Jan\u0026#39;s Phone - HA App)\u0026#34;\runit_of_measurement: \u0026#39;%\u0026#39;\rdevice_class: battery\rvalue_template: \u0026#34;{{ state_attr(\u0026#39;device_tracker.jseidl_oneplus\u0026#39;, \u0026#39;battery_level\u0026#39;) }}\u0026#34;\r- platform: min_max\rtype: mean\rentity_ids:\r- sensor.jseidl_phone_batt_owntracks\r- sensor.jseidl_phone_batt_ha_app\rGetting your phone\u0026rsquo;s charging state by monitoring the battery level Both device_tracker entities for our phones report only the battery_level but not the charging state. In order to get that information without any additional software running on the phones, I\u0026rsquo;ve decided to use the Trend sensor to decided if the phone is charging or discharging by observing the battery_level change across time.\n- platform: trend\rsensors:\rjseidl_phone_charging:\rentity_id: sensor.jseidl_phone_batt\rdevice_class: plug\rjseidl_phone_discharging:\rentity_id: sensor.jseidl_phone_batt\rinvert: true\rdevice_class: battery\rReminder for charging your phone Something that used to happen a lot with both my wife and I was waking up in the morning and realize you have 15% battery because we forgot to connect our phone to the charger.\nBy using the trend sensor trick from above plus my custom Bed sensor with ESPHome, we can cook up a quick automation to warn us with we ever commit that sin again. Note that I\u0026rsquo;m using my discharging sensor rather than the charging one because once the battery gets to 100% it will not be considered charging anymore.\nHere I\u0026rsquo;m using Google Assistant to announce it but you could use Alexa, send a Telegram message or just blink the lights.\nautomation:\r- alias: \u0026#39;Alert if in bed and phone not charging (Jan Side)\u0026#39;\rtrigger:\r- platform: state\rentity_id: binary_sensor.bed_occupancy_right\rto: \u0026#39;on\u0026#39;\rfor:\rminutes: 15\rcondition:\r- condition: state\rentity_id: input_boolean.bed_actions\rstate: \u0026#39;on\u0026#39;\r- condition: state\rentity_id: binary_sensor.light_exterior\rstate: \u0026#39;off\u0026#39;\r- condition: state\rentity_id: input_boolean.voice_notifications\rstate: \u0026#39;on\u0026#39;\r- condition: state\rentity_id: binary_sensor.lfuentes_phone_discharging\rstate: \u0026#39;on\u0026#39;\raction:\r- service: tts.google_translate_say\rentity_id: media_player.bedroom_speaker\rdata:\rmessage: Don\u0026#39;t forget to connect your phone to the charger, Jan!\rThe for 15 minutes statement is to give the trend sensor time to observe the changing data and set up correctly.\nTweaking the battery icon with charging states I wanted to use the charging states acquired from the trick above in my \u0026ldquo;residents\u0026rdquo; block on Lovelace UI. At first I had just added a charging state icon to the side of the main phone battery icon but that just didn\u0026rsquo;t looked good at all.\nI had created Template sensors to extract the battery_level attribute from my phone\u0026rsquo;s device_tracker entity from OwnTracks. It was easy to merge the charging state into a icon_template in that sensor\u0026rsquo;s definition thanks to Material Design Icons\u0026rsquo; naming convention (battery-90, battery-charing-90 etc).\nsensor:\r- platform: template\rsensors:\rjseidl_phone_batt:\rfriendly_name: Phone Battery (Jan)\rdevice_class: Battery\runit_of_measurement: \u0026#39;%\u0026#39;\rvalue_template: \u0026#34;{{ state_attr(\u0026#39;device_tracker.jseidl_presence\u0026#39;, \u0026#39;battery_level\u0026#39;) }}\u0026#34;\ricon_template: \u0026gt;-\r{% set tenths = state_attr(\u0026#39;device_tracker.jseidl_presence\u0026#39;, \u0026#39;battery_level\u0026#39;) / 10 %}\r {% set numeral = 10 * tenths|int %}\rmdi:battery{% if is_state(\u0026#39;binary_sensor.jseidl_phone_charging\u0026#39;, \u0026#39;on\u0026#39;) %}-charging{% endif %}{% if 10 \u0026lt;= numeral \u0026lt; 100 %}-{{ numeral }}{% elif numeral \u0026lt; 10 %}-outline{% endif %}\rNow the battery level icon will change between its regular or charging variant according to the phone\u0026rsquo;s charging state! Note that charging state is not the same as plugged in. We infer charging state by how the battery_level changes (increases or reduces) thus when the battery gets to 100% it will not show as charging even thou its plugged in.\nAnd that concludes all the tricks I know so far for battery_level. Template sensors are a VERY powerful tool. I use it a lot for solving various needs. What are your creative solutions with template sensors? Leave it down in the comments!\n","permalink":"https://synapselabs.io/posts/battery-level-tricks-with-home-assistant/","tags":["Home Assistant","Sensors"],"title":"Battery level tricks with Home assistant"},{"categories":["Home Automation"],"contents":"After slapping around multiple ESPHome-based multisensors around the house, I needed a way to keep them from going off while I\u0026rsquo;m sleeping and I wasn\u0026rsquo;t quite fond of manually disabling and re-enabling the automations in a daily basis. In order to get Home Assistant to know when myself or my wife are in bed, I\u0026rsquo;ve decided to create custom bed occupancy sensors using a pair of bathroom scales, a pair of HX711 load-cell sensors on top of the same framework (ESPHome).\nWhat you\u0026rsquo;re gonna need  ESP32 micro-controller Two HX711 load-cell sensor Some short dupont-cables Optional: 4-conductor (RJ11) telephone cable + dual line RJ11 keystone box  Wiring it up Usually the boards on the bathroom scales have already labeled the S+, S-, E+, E- pads. Just solder those pads to the respective pads on the HX711 and in the other end, connect V, GND, DOUT and CLK to the ESP32. I\u0026rsquo;ve used short cables to wire the bathroom scale side to the HX711 and house the IC inside the bathroom scale cover, drilled a hole to pass the cables through and used a 4-conductor telephone cable and a two-line keystone box to connect the HX711 to the ESP32 (the cable between the keystone box and the ESP32 is a regular ethernet cable because it has all 8 conductors needed).\nBathroom scale board \u0026amp; drilled enclosure.\nFrom left to right: Assembled, HX711 wiring, RJ11 keystone terminals on an ethernet cable, wiring on ESP32 end.\nSetting up the sensor in ESPHome is really easy:\nsensor:\r- platform: hx711\rname: \u0026#34;Bed Weight (L)\u0026#34;\rid: bed_weight_l\rdout_pin: 12\rclk_pin: 14\rWe\u0026rsquo;ll be calibrating and adding filtering to this sensor next.\nCalibrating the HX711 sensors Out of the box the numbers spat out by the HX711 means nothing much. In order to calibrate you start by taking note of the values when there is no-load (or just the expected normal load \u0026ndash; the mattress and bed sheets in this case) and you will need to do the same with at least one known-weight load (thus more is better) on top of your scale and take note of the numbers shown, average them and use in the calibrate_linear filter on ESPHome.\nI had my full clothes hamper at hand so I weighted myself holding it in a regular bathroom scale, then weighted myself alone and subtracted both weights to get the weight of the clothes hamper (5.6kg \u0026ndash; I know, not freedom units), then used it as a known-weight to calibrate my bed sensor. I also used my faithful sliding_window_moving_average filter to iron out erroneous readings and help false-negatives while changing sleep positions at night.\nfilters:\r- calibrate_linear:\r- 66000 -\u0026gt; 0\r- 145000 -\u0026gt; 5.6\r- sliding_window_moving_average:\rwindow_size: 5\rsend_every: 5\rWatch out about WiFi powersave On ESPHome, the default setting for power_save_mode under wifi for ESP32s is LIGHT and that will make your sensor go unavailable from time to time due the ESP32 disconnecting from WiFi in order to save power. Make sure to change it to none to have it available all the time (we\u0026rsquo;re running constant power through USB so no worries there).\nwifi:\rssid: \u0026#34;Your Wifi SSID\u0026#34;\rpassword: !secret wifi_password\rpower_save_mode: none\rFull code\nesphome:\rname: meistersensor_bedsensor\rplatform: ESP32\rboard: nodemcu-32s\rwifi:\rssid: \u0026#34;Your Wifi SSID\u0026#34;\rpassword: !secret wifi_password\rpower_save_mode: none\r# Enable logging\r logger:\r# Enable Home Assistant API\r api:\rpassword: !secret api_ota_password\rota:\rpassword: !secret api_ota_password\rsensor:\r- platform: hx711\rname: \u0026#34;Bed Weight (L)\u0026#34;\rid: bed_weight_l\rdout_pin: 12\rclk_pin: 14\rfilters:\r- calibrate_linear:\r- 66000 -\u0026gt; 0\r- 145000 -\u0026gt; 5.6\r- sliding_window_moving_average:\rwindow_size: 5\rsend_every: 5\rupdate_interval: 2s\runit_of_measurement: kg\raccuracy_decimals: 2\r- platform: hx711\rname: \u0026#34;Bed Weight (R)\u0026#34;\rid: bed_weight_r\rdout_pin: 19\rclk_pin: 18\rfilters:\r- calibrate_linear:\r- 435000 -\u0026gt; 0\r- 512000 -\u0026gt; 5.6\r- sliding_window_moving_average:\rwindow_size: 5\rsend_every: 5\rupdate_interval: 2s\runit_of_measurement: kg\raccuracy_decimals: 2\rbinary_sensor:\r- platform: template\rname: \u0026#34;Bed Occupancy (Left)\u0026#34;\rdevice_class: occupancy\rlambda: |-\rif (id(bed_weight_l).state \u0026gt; 10) {\r return true;\r} else {\rreturn false;\r}\r- platform: template\rname: \u0026#34;Bed Occupancy (Right)\u0026#34;\rdevice_class: occupancy\rlambda: |-\rif (id(bed_weight_r).state \u0026gt; 10) {\r return true;\r} else {\rreturn false;\r}\rCreating groups for the bed occupancy Groups are useful for a bunch of stuff. We\u0026rsquo;ll use in our sensor to create two more pseudo sensors to indicate wether the bed is occupied and/or full.\ngroup:\rbed_occupied:\rname: \u0026#34;Bed Occupied\u0026#34;\rentities:\r- binary_sensor.bed_occupancy_left\r- binary_sensor.bed_occupancy_right\rbed_full:\rname: \u0026#34;Bed Full\u0026#34;\rentities:\r- binary_sensor.bed_occupancy_left\r- binary_sensor.bed_occupancy_right\rall: true\rI usually also pair them with a Template binary_sensor to make them prettier:\nbinary_sensor:\r- platform: template\rsensors:\r# Bed Sensors\r bed_occupied:\rfriendly_name: Bed Occupied (Master Bedroom)\rdevice_class: occupancy\rvalue_template: \u0026gt;-\r{{ is_state(\u0026#39;group.bed_occupied\u0026#39;, \u0026#39;on\u0026#39;) }}\r bed_full:\rfriendly_name: Bed Full (Master Bedroom)\rdevice_class: occupancy\rvalue_template: \u0026gt;-\r{{ is_state(\u0026#39;group.bed_full\u0026#39;, \u0026#39;on\u0026#39;) }}\r Automate your bed Now that you can sense occupancy on you bed, you can go crazy with the automations. See below a curated list of my bed automations.\n Turn off all lights when bed_full Turn on the alarm at night when bed_full Turn off the alarm in the morning when not bed_full Turn on the lightstrips under the bed when (movement in front of the nightstand) when not bed_occupied (night lights) Disable Alexa voice notifications (input_boolean.voice_notifications) when bed_occupied  That\u0026rsquo;s all for today folks! If you have any questions or comments, please leave below!\n","permalink":"https://synapselabs.io/posts/bed-sensor-with-esphome-on-homeassistant/","tags":["Home Assistant","ESP8266","ESPHome","Sensors","HC-SR04"],"title":"Making a bed occupancy sensor with bathroom scales, ESP32, HX711 load-cell sensors and ESPHome on Home Assistant"},{"categories":["Home Automation"],"contents":"One of the things I like about the ESP family of micro-controllers is the amount of 3V3 and GND pins on the board. That allows us to use only dupont cables and saves us from the hassle (or if you\u0026rsquo;re terrible at soldering like me) of soldering stuff. This is an easy build, inspired by BRUH Automation\u0026rsquo;s $15 Multisensor but using ESPHome instead of custom code.\nI\u0026rsquo;ve spent lots of time building my own library for ESP sensors but when I gave ESPHome a try, I\u0026rsquo;ve immediately trashed all that code and migrated my all sensors into ESPHome. I never looked back and to date I\u0026rsquo;m 100% satisfied with that choice. It allows you to modify and deploy from Home Assistant\u0026rsquo;s ESPHome Add-On, handle unavailable states, have plenty of modules for different components and it\u0026rsquo;s just a breeze to use.\nWhat you\u0026rsquo;re gonna need  ESP8266 micro-controller DHT22 temperature \u0026amp; humidity sensor AM312 PIR motion sensor TEMT600 Analog Light Intensity Module 5mm Neopixel LED Some short dupont-cables. Optional: This 3D printed enclosure (requires 3D printer)  Note: I will not cover wiring up with the dupont cables as you can check this out on BRUH Automation\u0026rsquo;s video.\nTemperature \u0026amp; Humidity I left those at 60 seconds intervals, first because it\u0026rsquo;s a pretty acceptable update range for temperature sensing and second because DHT22s aren\u0026rsquo;t quite fond of being probed all the time. I also needed a lambda filter since the default output is in Celsius and I live in the United States and here we use freedom units, not the peasant metric system.\n- platform: dht\rpin: D6\rmodel: AM2302\rtemperature:\rname: \u0026#34;Temperature (MultiSensor)\u0026#34;\runit_of_measurement: \u0026#34;°F\u0026#34;\rfilters:\r- lambda: return x * (9.0/5.0) + 32.0; Illuminance I check those every 2 seconds and use a sliding_window_moving_average filter to iron out outliers. Without a filter you will see this sensor bounce around. I\u0026rsquo;ve also used the lambda filter according to TEMT600\u0026rsquo;s cookbook on ESPHome website in order to convert the ADC input into illuminance lux values.\n- platform: adc\rpin: A0\rname: \u0026#34;Illuminance (MultiSensor)\u0026#34;\rid: light_sensor\runit_of_measurement: lux\rupdate_interval: 2s\rfilters:\r- lambda: return (x * 3.3 / 10000.0) * 2000000.0;\r- sliding_window_moving_average:\rwindow_size: 5\rsend_every: 5\rPIR Motion sensor This is the most straightforward, just defined as a binary_sensor. Couldn\u0026rsquo;t be more straightforward and so far I didn\u0026rsquo;t felt the need for filtering.\n- platform: gpio\rpin: D5\rname: \u0026#34;Motion (MultiSensor)\u0026#34;\rdevice_class: motion\rTemplate sensor I use a template sensor to flip a binary_sensor called light whenever Illuminance crosses a given threshold (2 in my case). This is a useful feature if, for example, you want to only turn the lights on if the room is dark.\n- platform: template\rname: \u0026#34;Light (MultiSensor)\u0026#34;\rdevice_class: light\rlambda: |-\rif (id(light_sensor).state \u0026gt; 2) {\r return true;\r} else {\rreturn false;\r}\rNeopixel LED Having a Neopixel LED instead of a plain RGB led saves you some pins on the ESP8266 board and are exposed to Home Assistant as a light which you can control the color and brightness. I use with my automations in order to have a visual aid on the room occupancy status (OFF = clear, blue = occupied).\nlight:\r- platform: fastled_clockless\rchipset: WS2812\rpin: D3\rnum_leds: 1\rrgb_order: RGB\rname: \u0026#34;LED (MultiSensor)\u0026#34;\rFull code:\nesphome:\rname: multisensor\rplatform: ESP8266\rboard: nodemcuv2 # adjust accordingly for your board\r wifi:\rssid: \u0026#34;Your Wifi SSID\u0026#34;\rpassword: !secret wifi_password\r# Enable logging\r logger:\r# Enable Home Assistant API\r api:\rpassword: !secret api_password\rota:\rpassword: !secret ota_password\r# Sensors\r sensor:\r- platform: dht\rpin: D6\rmodel: AM2302\rtemperature:\rname: \u0026#34;Temperature (MultiSensor)\u0026#34;\runit_of_measurement: \u0026#34;°F\u0026#34;\rfilters:\r- lambda: return x * (9.0/5.0) + 32.0; humidity:\rname: \u0026#34;Humidity (MultiSensor)\u0026#34;\rupdate_interval: 60s\r- platform: adc\rpin: A0\rname: \u0026#34;Illuminance (MultiSensor)\u0026#34;\rid: light_sensor\runit_of_measurement: lux\rupdate_interval: 2s\rfilters:\r- lambda: return (x * 3.3 / 10000.0) * 2000000.0;\r- sliding_window_moving_average:\rwindow_size: 5\rsend_every: 5\rbinary_sensor:\r- platform: gpio\rpin: D5\rname: \u0026#34;Motion (MultiSensor)\u0026#34;\rdevice_class: motion\r- platform: template\rname: \u0026#34;Light (MultiSensor)\u0026#34;\rdevice_class: light\rlambda: |-\rif (id(light_sensor).state \u0026gt; 2) {\r return true;\r} else {\rreturn false;\r}\rlight:\r- platform: fastled_clockless\rchipset: WS2812\rpin: D3\rnum_leds: 1\rrgb_order: RGB\rname: \u0026#34;LED (MultiSensor)\u0026#34;\r","permalink":"https://synapselabs.io/posts/multisensors-with-esphome-on-homeassistant/","tags":["Home Assistant","ESP8266","ESPHome","Sensors","DHT22","AM312","TEMT6000","Neopixel","3D printing"],"title":"Building custom multisensors with an ESP8266 and ESPHome on Home Assistant"},{"categories":["Home Automation"],"contents":"If there\u0026rsquo;s one thing that makes everyone feels better despite having no friends, is having robots talking to you like they cared. From today on, every time you arrive home to your empty house because your partner divorced you and took your kids and your dog, you will feel that warmth in your heart.\nFor that, we\u0026rsquo;re gonna need the Better Presence Add-On for Home Assistant \u0026ndash; in order to know when we just arrived, a Door Sensor (I use Z-Wave Aeotec Door/Window Sensor 7) to know when we exactly open the front door and the Alexa Media Player custom component.\nWe will start by using the device_tracker sensor (created by Better Presence) as a trigger:\ntrigger:\r- platform: state\rentity_id: device_tracker.jseidl_presence\rto: \u0026#39;Just arrived\u0026#39;\rThe wait_template action type in Home Assistant\u0026rsquo;s the script syntax (used in automations) enables us to wait until a sensor gets into a given state before giving up (timeout configurable) and we will use that to make our automation wait until the front door is open.\n- wait_template: \u0026#34;{{ is_state(\u0026#39;binary_sensor.door_main\u0026#39;, \u0026#39;on\u0026#39;) }}\u0026#34;\rtimeout: \u0026#39;00:05:00\u0026#39;\rFinally, we use Alexa Media Player\u0026lsquo;s notify service endpoint to greet us:\n- service: notify.alexa_media_echo_dot_living_room\rdata:\rdata:\rtype: announce\rmessage: \u0026#39;Welcome home Jan!\u0026#39;\r(Option #2) Use Google Assistant and Google Translate\u0026rsquo;s tts platform:\n- service: tts.google_translate_say\rentity_id: media_player.living_room_google_home\rdata:\rmessage: \u0026#39;Welcome home Jan!\u0026#39;\rThe full code:\nautomation:\r- alias: \u0026#39;Greets when Jan arrives (Alexa)\u0026#39;\rtrigger:\r- platform: state\rentity_id: device_tracker.jseidl_presence\rto: \u0026#39;Just arrived\u0026#39;\rcondition:\r- condition: state\rentity_id: input_boolean.voice_notifications\rstate: \u0026#39;on\u0026#39;\raction:\r- wait_template: \u0026#34;{{ is_state(\u0026#39;binary_sensor.door_main\u0026#39;, \u0026#39;on\u0026#39;) }}\u0026#34;\rtimeout: \u0026#39;00:05:00\u0026#39;\r- service: notify.alexa_media_echo_dot_living_room\rdata:\rdata:\rtype: announce\rmessage: \u0026#39;Welcome home Jan!\u0026#39;\rThat\u0026rsquo;s it! Hope that helps bringing a little more joy to your day!\n","permalink":"https://synapselabs.io/posts/using-alexa-to-greet-you-with-home-assistant/","tags":["Home Assistant","Alexa","Sensors"],"title":"Using Alexa to greet you with Home Assistant"},{"categories":null,"contents":"I\u0026rsquo;m a Brazilian information security warlock living in the US obssesed by robots!\n","permalink":"https://synapselabs.io/author/jan-seidl/","tags":null,"title":"Jan Seidl"}]